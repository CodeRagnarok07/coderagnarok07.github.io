

### pipenv

- pasos
    
    instalacion
    
    `python3 -m pip install pipenv`
    
    -Crea dos archivos, lock y pipfile, lock es el que no se debería modificar por nosotros,
    
    -Cambiar versión de python
    Modificar el pip file
    
- hoja de comandos 1
    
    `pipenv shell` ⇒ -Activar el virtual env
    
    `pipenv install [nombre de paquete]`
    
    `pipenv install` ⇒ Crear un environment que tenga las características de nuestro pip file:
    
    `pipenv install`  ⇒ (para crear un environment basado en el pipfile)
    
    `pipenv install -r  requirements.txt` ⇒ Llevar a mi virtual environment mis paquetes de un requirements.txt
    
    `pipenv install [nombre de paquete] --dev` ⇒ -Instalar solo un paquete para nosotros pero que no se vaya a producción
    
    `pipenv install --ignore-pipfile` ⇒ -Crear un environment con lo que tenga un piplock
    
    `pipenv uninstall [nombre de paquete]` ⇒ -Desinstalar un paquete
    
    `pipenv uninstall nombredelibreria`
    `pipenv --rm` ⇒ (para borrar un enviornment)
    
    `pipenv --rm` ⇒ -Eliminar un environment
    
     `pipenv --python [número de versión]` ⇒ -Cambiar versión de python “Modificar el pip file”
    
    `pipenv --venv` ⇒ -Ver el path del virtual environment
    
    `pipenv check` ⇒ -Revisar que nuestros paquetes del environment estén ok
    
    `pipenv lock` ⇒  Actualizar mi pip.lock con los paquetes que tengo en mi pipfile
    
    `pipenv lock -r`  ⇒ Ver los paquetes instalados
    
    `pipenv graph` ⇒ ver los paquetes en arbol de dependencias
    
    `pipenv run python manage.py runserver` ⇒ y para correr el proyecto de django uso:
    
    `pipenv run python [nombre de mi script]`  ⇒ Hacer que funcione un script sin activar el virtual env
    
    `exit`  ⇒Desactivar un virtual env
    
    pipenv lock -r > requirements.txt
    
    pipenv lock -r -d > requirements.txt
    
