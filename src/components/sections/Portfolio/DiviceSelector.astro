---
// recibe un array y determina el tipo de dive a utilizar y con el formateo
import ImgMockup from "@/lib/ImgMockup/index.astro";

interface Props {
    pathsList: TypeGetImgsFromKey;
}
const { pathsList } = Astro.props;

const getSize = (elemet: ImgsFromKey): string => {
    const extension = elemet[0].split("/");
    const getsize: string = extension[extension.length - 1].split(".")[0];
    return getsize;
};
---

<style>
    .divice{
        position: absolute;
        top:0;

    }
    .divice-lg {
        height: 100%;
        position: relative;
    }
    .divice-md {
        right: 20%;
        width: 40%;

    }
    .divice-sm {
        left: 5%;
        
    }
</style>
<div class="w-full">
    <div class="flex w-full h-full  min-h-80">

        <div class="relative"> 
            {false && pathsList.map((e) => (
                
            <div
                class:list={[
                    " w-auto h-full divice",
                    "divice-" + getSize(e),
                ]}
            >
                {e[1]().then((r) => (
                    <ImgMockup
                        size={getSize(e) as SizeType}
                        pathMeta={r.default}
                    />
                ))}
            </div>
         ))}
            <!-- // pathsList.map((e) => ( -->
                
                <div
                    class:list={[
                        "flex items-center w-auto md:h-full divice",
                        "divice-" + getSize(pathsList[0]),
                    ]}
                >
                    {pathsList[0][1]().then((r) => (
                        <ImgMockup
                            size={getSize(pathsList[0]) as SizeType}
                            pathMeta={r.default}
                        />
                    ))}
                </div>
            <!-- // )) -->
        </div>

    </div>
</div>
